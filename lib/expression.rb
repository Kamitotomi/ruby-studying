#正規表現を使って条件に当てはまる単語を抜き出してみる

I like Ruby.
Python is great language.
Java and JavaScript are different.

#上の文章からプログラミング言語を抜き出す
text = <<TEXT

I like Ruby.
Python is great language.
Java and JavaScript are different.
TEXT

text.scan(/[A-Z][A-Za-z]+/)

#文字列の返還

text = <<TEXT
私の郵便番号は1234567です。
俺の住所は6770056 兵庫県西脇市板波町1234だぜ。
TEXT

puts text.gsub(/(\d{3})(\d{4})/, '\1-\2')

#\dは　1個の半角数字の意味である \d\dなら半角数字2個 \dみたいなのは「メタ文字」と呼ぶ

#この場合はどうする？
text = <<TEXT
名前：伊藤淳一
電話：03-1234-5678
電話：090-1234-5678
電話：0795-12-3456
電話：04992-1-2345
住所：兵庫県西脇市板波町1-2-3
TEXT

#まずは法則を見つける。上の場合は「半角数字が2個～5個、ハイフン、半角数字が1個～4個、ハイフン、半角数字が4個」

#量産指定子{n,m} や {n} というメタ文字。{n,m} は「直前の文字が n 個以上、m 個以下」の意味

puts text.gsub(\d{2,5}-\d{1,4}-\d{4})

text = <<-TEXT
名前：伊藤淳一
電話：03(1234)5678
？？：9999-99-9999
？？：03(1234-5678
住所：兵庫県西脇市板波町1-2-3
TEXT
numbers = text.scan(/0[1-9]\d{0,3}[-(]\d{1,4}[-)]\d{4}/)

numbers.grep(/\(\d+\)|-\d+-/)

#重要なこと

\d は「半角数字1文字」を表す
{n,m} は「直前の文字が n 文字以上、m 文字以下」であることを表す
{n} は「直前の文字がちょうど n 文字」であることを表す
[AB] は「AまたはBが1文字」であることを表す
[a-z] と [-az] ではハイフンの意味が異なる
正規表現の正確さと複雑さはトレードオフになることが多い


text = <<-TEXT
クープバゲットのパンは美味しかった。
今日はクープ バゲットさんに行きました。
クープ　バゲットのパンは最高。
ジャムおじさんのパン、ジャムが入ってた。
また行きたいです。クープ・バゲット。
クープ・バケットのパン、売り切れだった（><）
TEXT

text.split(/\n/).grep(/クープ.?バ[ゲケ]ット/)

#正規表現がsublimeでうまくいかないよ。ピエン　パオン